{
  "redhat.telemetry.enabled": false,
  "telemetry.telemetryLevel": "off",
  "window.zoomLevel": 0,
  "workbench.startupEditor": "newUntitledFile",
  "workbench.iconTheme": "file-icons",
  "workbench.productIconTheme": "fluent-icons",
  "workbench.statusBar.visible": true,
  "workbench.editor.untitled.hint": "hidden",
  "workbench.editorAssociations": {
    "*.ipynb": "jupyter-notebook"
  },
  "workbench.colorTheme": "Solarized Dark",
  "workbench.colorCustomizations": {
    "[Solarized Dark]": {
      "editorWhitespace.foreground": "#93A1A150",
      "editorInlayHint.foreground": "#A0A0A0F0",
      "editorInlayHint.background": "#00000000",
    },
    "[Kimbie Dark+]": {
      "editorWhitespace.foreground": "#A57A4C50",
      "editorInlayHint.background": "#00000000",
      "statusBar.background": "#362712",
      "tab.inactiveBackground": "#131510",
      "tab.activeBorder": "#5e3a1b",
    }
  },
  "explorer.confirmDragAndDrop": false,
  "explorer.confirmDelete": false,
  "files.exclude": {
    "**/.idea": true,
    "**/.nyc_output": true,
    "**/desktop.ini": true,
    "**/node_modules": true,
    "**/target": true,
    "**/Thumbs.db": true
  },
  "files.insertFinalNewline": true,
  "files.trimTrailingWhitespace": true,
  "files.associations": {
    "vimrc": "viml"
  },
  "files.watcherExclude": {
    "**/target/**": true
  },
  "editor.fontFamily": "Fantasque Sans Mono",
  "editor.fontSize": 16,
  "editor.insertSpaces": false,
  "editor.wordWrapColumn": 120,
  "editor.minimap.renderCharacters": false,
  "editor.renderWhitespace": "boundary",
  "editor.snippetSuggestions": "top",
  "editor.autoClosingBrackets": "always",
  "editor.autoClosingQuotes": "always",
  "editor.suggest.snippetsPreventQuickSuggestions": false,
  "editor.linkedEditing": true,
  "editor.semanticHighlighting.enabled": true,
  "editor.minimap.showSlider": "always",
  "editor.stickyTabStops": true,
  "editor.codeLensFontFamily": "Fantasque Sans Mono",
  "editor.codeLensFontSize": 14,
  "editor.inlayHints.fontSize": 14,
  "editor.semanticTokenColorCustomizations": {},
  "security.workspace.trust.enabled": false,
  "emmet.showExpandedAbbreviation": "inMarkupAndStylesheetFilesOnly",
  "task.quickOpen.skip": true,
  "git.autofetch": true,
  "git.ignoreRebaseWarning": true,
  "auto-close-tag.fullMode": true,
  "codesnap.transparentBackground": true,
  "template-string-converter.autoRemoveTemplateString": true,
  "[c]": {
    "editor.formatOnSave": true
  },
  "[cpp]": {
    "editor.formatOnSave": true
  },
  "[css]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[html]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[jsonc]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[javascript]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[rust]": {
    "editor.insertSpaces": true,
    "editor.formatOnSave": true
  },
  "[sql]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true
  },
  "[typescript]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[vue]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[yaml]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true
  },
  "[markdown]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[mdx]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true
  },
  "[terraform]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
  },
  "[python]": {
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "ms-python.python"
  },
  "[php]": {
    "editor.insertSpaces": true
  },
  "[ruby]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true
  },
  "javascript.inlayHints.enumMemberValues.enabled": true,
  "javascript.inlayHints.functionLikeReturnTypes.enabled": true,
  "javascript.inlayHints.parameterNames.enabled": "all",
  "javascript.inlayHints.parameterTypes.enabled": true,
  "javascript.inlayHints.propertyDeclarationTypes.enabled": true,
  "javascript.inlayHints.variableTypes.enabled": true,
  "typescript.inlayHints.enumMemberValues.enabled": true,
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "typescript.inlayHints.parameterNames.enabled": "all",
  "typescript.inlayHints.parameterTypes.enabled": true,
  "typescript.inlayHints.propertyDeclarationTypes.enabled": true,
  "typescript.inlayHints.variableTypes.enabled": true,
  "python.linting.prospectorEnabled": true,
  "python.linting.enabled": true,
  "python.formatting.provider": "black",
  "markdown.extension.toc.orderedList": true,
  "rust-analyzer.debug.engine": "vadimcn.vscode-lldb",
  "rust-analyzer.debug.openDebugPane": true,
  "rust-analyzer.inlayHints.closureReturnTypeHints": true,
  "rust-analyzer.inlayHints.lifetimeElisionHints.enable": "skip_trivial",
  "rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames": true,
  "rust-analyzer.inlayHints.reborrowHints": true,
  "rust-analyzer.lens.enumVariantReferences": true,
  "rust-analyzer.lens.references": true,
  "rust-analyzer.lens.methodReferences": true,
  "terraform.languageServer": {
    "external": true
  },
  "go.useLanguageServer": true,
  "githubIssues.queries": [
    {
      "label": "My Issues",
      "query": "default"
    },
    {
      "label": "All Issues",
      "query": "state:open repo:${owner}/${repository} sort:created-desc"
    }
  ],
  "githubIssues.assignWhenWorking": false,
  "githubIssues.createInsertFormat": "url",
  "highlight.regexes": {
    "(TODO:?)": {
      "regexFlags": "g",
      "decorations": [
        {
          "color": "#ffffff",
          "backgroundColor": "#ffbd2a",
          "overviewRulerColor": "rgba(255, 189, 42, 0.8)"
        },
      ]
    },
    "(FIXME:?)": {
      "regexFlags": "g",
      "decorations": [
        {
          "color": "#fff",
          "backgroundColor": "#f06292",
          "overviewRulerColor": "rgba(240, 98, 146, 0.8)"
        }
      ]
    }
  },
  "projects.checkDirty": true,
  "projects.checkPaths": true,
  "projects.statusbarPriority": 0,
  "projects.refreshRoots": [
    "~/Coding"
  ],
  "projects.configPath": "~/.vscode/projects.json",
  "projects.inferGroups": true,
  "module-templates.engine": "handlebars",
  "module-templates.templates": {
    "redux-slice": {
      "displayName": "Redux slice",
      "defaultPath": "src/slices",
      "questions": {
        "name": "Slice name?",
      },
      "files": [
        {
          "name": "{{camel name}}.ts",
          "open": true,
          "content": [
            "import { createSlice, PayloadAction } from '@reduxjs/toolkit';",
            "",
            "import { RootState } from 'store';",
            "",
            "interface {{pascal name}}State {}",
            "",
            "export const {{camel name}}Slice = createSlice({",
            "  name: '{{camel name}}',",
            "  initialState: {} as {{pascal name}}State,",
            "  reducers: {},",
            "});",
            "",
            "export const {} = {{camel name}}Slice.actions;",
            "",
            "export default {{camel name}}Slice.reducer;",
            ""
          ]
        }
      ]
    },
    "react-component": {
      "displayName": "React typescript component",
      "defaultPath": "src/components",
      "folder": "{{pascal name}}",
      "questions": {
        "name": "Component name?",
        "children": [
          {
            "displayName": "Component has children",
            "value": true
          },
          {
            "displayName": "Component has no children",
            "value": false
          }
        ]
      },
      "files": [
        {
          "name": "index.ts",
          "content": [
            "export { default } from './{{pascal name}}';",
            ""
          ]
        },
        {
          "name": "{{pascal name}}.tsx",
          "open": true,
          "content": [
            "import React from 'react';",
            "",
            "import { Container } from './{{pascal name}}.styles';",
            "",
            "export interface {{pascal name}}Props extends React.HTMLAttributes<HTMLDivElement> {}",
            "",
            "const {{pascal name}}: React.FC<{{pascal name}}Props> = ({ {{#if children}}children, {{/if}}...props }) => {",
            "  return <Container {...props}>{{#if children}}{children}{{/if}}</Container>;",
            "};",
            "",
            "export default {{pascal name}};",
            ""
          ]
        },
        {
          "name": "{{pascal name}}.styles.ts",
          "open": true,
          "content": [
            "import styled from 'styled-components';",
            "",
            "import { {{pascal name}}Props } from './{{pascal name}}';",
            "",
            "export const Container = styled.div<{{pascal name}}Props>``;",
            ""
          ]
        },
        {
          "name": "{{pascal name}}.stories.tsx",
          "open": true,
          "content": [
            "import { Meta } from '@storybook/react';",
            "",
            "import {{pascal name}} from './{{pascal name}}';",
            "",
            "export default {",
            "  title: '{{pascal name}}',",
            "  component: {{pascal name}},",
            "  argTypes: {},",
            "} as Meta;",
            "",
            "export const Default = {",
            "  args: {",
            "    {{#if children}}children: 'Children'{{/if}}",
            "  }",
            "};",
            ""
          ]
        }
      ]
    }
  }
}
