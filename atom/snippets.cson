# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
#
# coffeelint: disable=max_line_length
'.source.ruby, .source.puppet, .source.coffee, .source.python, .source.scss, .source.sass, .source.css.scss, .source.css.sass, .source.css.less, .source.js, .source.go, .source.scala, .source.ts, .source.php, .source.java, .source.css, .source.css .meta.property-value':
  'combak':
    'prefix': 'combak'
'.source.cmake':
  'Init a CMakeLists Project':
    'prefix': 'init'
    'body': 'cmake_minimum_required(VERSION 2.8)\n\nproject($1)\n\nadd_executable($1 ${2:src/main.cpp})\n$3'
  'Find package':
    'prefix': 'fp'
    'body': 'find_package($1${2: REQUIRED})\n$3'
'.source.cpp,.source.h':
  'cout':
    'prefix': 'cout'
    'body': 'std::cout << ${1:\"}${2:message}${1:\"} << std::endl;$3'
  'cin':
    'prefix': 'cin'
    'body': 'std::cin >> ${1:variable};$2'
  'cerr':
    'prefix': 'cerr'
    'body': 'std::cerr << ${1:\"}${2:message}${1:\"} << std::endl;$3'
  'forv':
    'prefix': 'forv'
    'body': 'for (auto& ${1:it} : ${2:vector}) {\n$3\n}'
'.source.rust':
  'Derive Macro':
    'prefix': 'derive'
    'body': '#[derive(${1:Trait})]$0'
  'Let':
    'prefix': 'let'
    'body': 'let ${1:mut }${4:name}${2:: ${3:type}} = ${5:value};$0'
  'Assert':
    'prefix': 'ass'
    'body': 'assert${1:_eq}!($2, $3);$0'
  'allow':
    'prefix': 'allow'
  'allow!':
    'prefix': 'allow!'
  'deny':
    'prefix': 'deny'
  'deny!':
    'prefix': 'deny!'
'.source.js':
  'CommonJS require':
    'prefix': 'req'
    'body': 'const ${1:module} = require(\'${2:${1:module}}\');$0'
  'Import Module':
    'prefix': 'imp'
    'body': 'import ${1:module} from \'${2:${1:module}}\';$0'
  'Import Module As':
    'prefix': 'impas'
    'body': 'import ${1:name} as ${2:alias} from \'${3:module}\';$0'
  'Import Member':
    'prefix': 'impm'
    'body': 'import { ${1:member} } from \'${2:module}\';$0'
  'Import Member As':
    'prefix': 'impmas'
    'body': 'import { ${1:member} as ${2:alias} } from \'${3:module}\';$0'
  'Export Function':
    'prefix': 'expf'
    'body': 'export (${1:params}) => {\n\t$2\n};'
  'Export Default Function':
    'prefix': 'expdf'
    'body': 'export default (${1:params}) => {\n\t$2\n};'
  'Export Default Object':
    'prefix': 'expo'
    'body': 'export default {\n\t$1\n};'
  'Export Default Class':
    'prefix': 'expc'
    'body': 'export default class ${1:name} {\n\tconstructor(${2:params}) {\n\t\t$3\n\t}\n};'
  'Export Default Class Extends':
    'prefix': 'expce'
    'body': 'export default class ${1:name} extends ${2:base} {\n\tconstructor(${3:params}) {\n\t\t$4\n\t}\n};'
  'Method':
    'prefix': 'meth'
    'body': '${1:name}(${2:params}) {\n\t$3\n},'
  'Getter':
    'prefix': 'get'
    'body': 'get${1: ${2:name}}() {\n\treturn $3;\n},$0'
  'Setter':
    'prefix': 'set'
    'body': 'set${1: ${2:name}}(${3:value}) {\n\t$4\n},$0'
  'Function':
    'prefix': 'fun'
    'body': 'const ${1:name} = ${2:(${3:params})} => ${4:{\n\t$5\n\\}};'
  'Anonymous Function':
    'prefix': 'f'
    'body': '${1:(${2:params})} => ${3:{\n\t$4\n\\}}'
  'Set Timeout':
    'prefix': 'timeout'
    'body': 'setTimeout(() => {\n\t$2\n}, ${1:10});'
  'Set Interval':
    'prefix': 'interval'
    'body': 'setInterval(() => {\n\t$2\n}, ${1:10});'
  'For Of':
    'prefix': 'forof'
    'body': 'for(let ${1:value} of ${2:iterable}) {\n\t$3\n}'
  'For In':
    'prefix': 'forin'
    'body': 'for(let ${1:prop} in ${2:obj}) {\n\t$3\n}'
  'Generator':
    'prefix': 'gen'
  'Anonymous Generator':
    'prefix': 'g'
