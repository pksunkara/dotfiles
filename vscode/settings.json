{
  "telemetry.telemetryLevel": "off",
  "window.zoomLevel": 2,
  "window.commandCenter": false,
  "window.autoDetectColorScheme": true,
  "workbench.layoutControl.enabled": false,
  "workbench.activityBar.orientation": "vertical",
  "workbench.startupEditor": "newUntitledFile",
  "workbench.tree.enableStickyScroll": true,
  "workbench.iconTheme": "catppuccin-latte",
  "workbench.productIconTheme": "fluent-icons",
  "workbench.editor.empty.hint": "hidden",
  "workbench.colorTheme": "Catppuccin Mocha Darker Bordered",
  "workbench.preferredDarkColorTheme": "Bearded Theme feat. Gold D Raynh",
  "workbench.preferredLightColorTheme": "Catppuccin Mocha Darker Bordered",
  "workbench.preferredHighContrastColorTheme": "Bearded Theme feat. Gold D Raynh",
  "workbench.preferredHighContrastLightColorTheme": "Bearded Theme Coffee Cream",
  "workbench.colorCustomizations": {
    "[Solarized*]": {
      "editorWhitespace.foreground": "#93A1A150",
      "editorInlayHint.background": "#00000000"
    },
    "[Night Owl*]": {
      "editorInlayHint.background": "#00000000"
    },
    "[Gruvbox*]": {
      "editorInlayHint.background": "#00000000"
    },
    "[Bearded Theme*]": {
      "editorInlayHint.background": "#00000000",
      "editorInlayHint.typeBackground": "#00000000"
    },
    "[Catppuccin Mocha Darker Bordered]": {
      "editorWhitespace.foreground": "#BAC2DE33"
    },
    "[Kimbie Dark+]": {
      "editorWhitespace.foreground": "#A57A4C50",
      "editorInlayHint.background": "#00000000",
      "statusBar.background": "#362712",
      "tab.inactiveBackground": "#131510",
      "tab.activeBorder": "#5E3A1B"
    }
  },
  "explorer.confirmDragAndDrop": false,
  "explorer.confirmDelete": false,
  "files.insertFinalNewline": true,
  "files.trimTrailingWhitespace": true,
  "editor.fontFamily": "Fantasque Sans Mono",
  "editor.fontSize": 16,
  "editor.insertSpaces": false,
  "editor.wordWrapColumn": 120,
  "editor.minimap.renderCharacters": false,
  "editor.renderWhitespace": "boundary",
  "editor.snippetSuggestions": "top",
  "editor.autoClosingBrackets": "always",
  "editor.autoClosingQuotes": "always",
  "editor.suggest.snippetsPreventQuickSuggestions": false,
  "editor.quickSuggestions": {
    "strings": true
  },
  "editor.linkedEditing": true,
  "editor.semanticHighlighting.enabled": true,
  "editor.minimap.showSlider": "always",
  "editor.stickyTabStops": true,
  "editor.codeLensFontFamily": "Fantasque Sans Mono",
  "editor.codeLensFontSize": 14,
  "editor.inlayHints.fontSize": 14,
  "editor.inlineSuggest.enabled": true,
  "editor.semanticTokenColorCustomizations": {},
  "files.exclude": {
    "**/.idea": true,
    "**/.nyc_output": true,
    "**/desktop.ini": true,
    "**/node_modules": true,
    "**/target": true,
    "**/Thumbs.db": true
  },
  "files.associations": {
    "vimrc": "viml"
  },
  "files.watcherExclude": {
    "**/target/**": true
  },
  "workbench.editorAssociations": {
    "*.ipynb": "jupyter-notebook"
  },
  "workbench.editor.customLabels.patterns": {
    "**/utils.(rs|ts)": "${dirname} - utils",
    "**/mod.rs": "${dirname} - mod",
    "**/index.ts": "${dirname} - index",
    "**/types.ts": "${dirname} - types",
    "**/app/**/page.tsx": "${dirname} - page",
    "**/app/**/page.mdx": "${dirname} - page",
    "**/app/**/page.styles.ts": "${dirname} - styles",
    "**/app/**/page.stories.tsx": "${dirname} - stories",
    "**/app/**/layout.tsx": "${dirname} - layout",
    "**/app/**/layout.styles.ts": "${dirname} - layout styles",
    "**/app/**/template.tsx": "${dirname} - template"
  },
  "diffEditor.experimental.showMoves": true,
  "diffEditor.hideUnchangedRegions.enabled": true,
  "git.autofetch": true,
  "git.ignoreRebaseWarning": true,
  "notebook.formatOnSave.enabled": true,
  "notebook.codeActionsOnSave": {
    "notebook.source.fixAll": "explicit",
    "notebook.source.organizeImports": "explicit"
  },
  "security.workspace.trust.enabled": false,
  "task.quickOpen.skip": true,
  "[c]": {
    "editor.formatOnSave": true
  },
  "[cpp]": {
    "editor.formatOnSave": true
  },
  "[css]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[cypher]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true
  },
  "[graphql]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[handlebars]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[html]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascript]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[lua]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true
  },
  "[markdown]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[mdx]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true
  },
  "[python]": {
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "charliermarsh.ruff",
    "editor.codeActionsOnSave": {
      "source.fixAll": "explicit",
      "source.organizeImports": "explicit"
    }
  },
  "[php]": {
    "editor.insertSpaces": true
  },
  "[ruby]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true
  },
  "[rust]": {
    "editor.insertSpaces": true,
    "editor.formatOnSave": true
  },
  "[sql]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true
  },
  "[terraform]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true
  },
  "[toml]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "tamasfe.even-better-toml"
  },
  "[typescript]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[vue]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[yaml]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true
  },
  "evenBetterToml.formatter.allowedBlankLines": 1,
  "evenBetterToml.formatter.alignEntries": true,
  "evenBetterToml.formatter.arrayAutoCollapse": true,
  "evenBetterToml.formatter.arrayTrailingComma": true,
  "evenBetterToml.formatter.columnWidth": 120,
  "evenBetterToml.formatter.reorderKeys": true,
  "evenBetterToml.formatter.reorderArrays": true,
  "go.useLanguageServer": true,
  "html.autoClosingTags": false,
  "javascript.autoClosingTags": false,
  "javascript.inlayHints.enumMemberValues.enabled": true,
  "javascript.inlayHints.functionLikeReturnTypes.enabled": true,
  "javascript.inlayHints.parameterNames.enabled": "all",
  "javascript.inlayHints.parameterTypes.enabled": true,
  "javascript.inlayHints.propertyDeclarationTypes.enabled": true,
  "javascript.inlayHints.variableTypes.enabled": true,
  "typescript.autoClosingTags": false,
  "typescript.inlayHints.enumMemberValues.enabled": true,
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "typescript.inlayHints.parameterNames.enabled": "all",
  "typescript.inlayHints.parameterTypes.enabled": true,
  "typescript.inlayHints.propertyDeclarationTypes.enabled": true,
  "typescript.inlayHints.variableTypes.enabled": true,
  "Lua.diagnostics.globals": ["vim"],
  "Lua.format.defaultConfig": {
    "trailing_table_separator": "smart"
  },
  "Lua.hint.enable": true,
  "Lua.hint.setType": true,
  "markdown.extension.toc.orderedList": true,
  "rust-analyzer.debug.engine": "vadimcn.vscode-lldb",
  "rust-analyzer.debug.openDebugPane": true,
  "rust-analyzer.inlayHints.lifetimeElisionHints.enable": "skip_trivial",
  "rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames": true,
  "rust-analyzer.inlayHints.closureReturnTypeHints.enable": "with_block",
  "rust-analyzer.inlayHints.reborrowHints.enable": "always",
  "rust-analyzer.lens.references.adt.enable": true,
  "rust-analyzer.lens.references.enumVariant.enable": true,
  "rust-analyzer.lens.references.method.enable": true,
  "rust-analyzer.lens.references.trait.enable": true,
  "tailwindCSS.emmetCompletions": true,
  "tailwindCSS.experimental.classRegex": [
    ["\\bcva\\(([^)]*)\\)", "(?:'|`)([^'`]*)(?:'|`)"],
    ["\\btw(?:\\.\\w+|\\([^\\)]*\\))([^]*);", "(?:'|`)([^'`]*)(?:'|`)"]
  ],
  "auto-close-tag.fullMode": true,
  "auto-close-tag.insertSpaceBeforeSelfClosingTag": true,
  "auto-close-tag.activationOnLanguage": [
    "html",
    "xml",
    "php",
    "handlebars",
    "javascriptreact",
    "typescriptreact",
    "markdown",
    "vue",
    "HTML (Eex)"
  ],
  "emmet.showExpandedAbbreviation": "inMarkupAndStylesheetFilesOnly",
  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": false,
    "scminput": false,
    "yaml": false,
    "json": false,
    "jsonc": false
  },
  "template-string-converter.autoRemoveTemplateString": true,
  "template-string-converter.addBracketsToProps": true,
  "codesnap.transparentBackground": true,
  "githubIssues.queries": [
    {
      "label": "My Issues",
      "query": "default"
    },
    {
      "label": "All Issues",
      "query": "state:open repo:${owner}/${repository} sort:created-desc"
    }
  ],
  "githubIssues.assignWhenWorking": false,
  "githubIssues.createInsertFormat": "url",
  "githubPullRequests.pullBranch": "never",
  "highlight.regexes": {
    "(TODO:?)": {
      "regexFlags": "g",
      "decorations": [
        {
          "color": "#ffffff",
          "backgroundColor": "#ffbd2a",
          "overviewRulerColor": "#ffbd2acc"
        }
      ]
    },
    "(FIXME:?)": {
      "regexFlags": "g",
      "decorations": [
        {
          "color": "#fff",
          "backgroundColor": "#f06292",
          "overviewRulerColor": "#f06292cc"
        }
      ]
    }
  },
  "projects.checkDirty": true,
  "projects.checkPaths": true,
  "projects.statusbarPriority": 0,
  "projects.refreshRoots": ["~/Coding"],
  "projects.configPath": "~/.vscode/projects.json",
  "projects.inferGroups": true,
  "redhat.telemetry.enabled": false,
  "module-templates.engine": "handlebars",
  "module-templates.templates": {
    "react-common": {
      "folder": "{{pascal name}}",
      "questions": {
        "name": "Component name?"
      },
      "files": [
        {
          "name": "index.ts",
          "content": [
            "export { default } from './{{pascal name}}';",
            "export * from './types';",
            ""
          ]
        },
        {
          "name": "{{pascal name}}.styles.ts",
          "open": true,
          "content": [
            "import { tw } from 'theme';",
            "",
            "export const Container = tw.div``;",
            ""
          ]
        }
      ]
    },
    "react-component": {
      "extends": ["react-common"],
      "displayName": "React component",
      "defaultPath": "src/components",
      "folder": "{{pascal name}}",
      "questions": {
        "name": "Component name?",
        "children": [
          {
            "displayName": "Component has children",
            "value": true
          },
          {
            "displayName": "Component has no children",
            "value": false
          }
        ]
      },
      "files": [
        {
          "name": "types.ts",
          "open": true,
          "content": [
            "import { HTMLAttributes{{#if children}}, ReactNode{{/if}} } from 'react';",
            "",
            "export interface {{pascal name}}Props extends HTMLAttributes<HTMLDivElement> {",
            "{{#if children}}  children: ReactNode;{{/if}}",
            "}",
            ""
          ]
        },
        {
          "name": "{{pascal name}}.tsx",
          "open": true,
          "content": [
            "import React from 'react';",
            "",
            "import { {{pascal name}}Props } from './types';",
            "",
            "import { Container } from './{{pascal name}}.styles';",
            "",
            "const {{pascal name}}: React.FC<{{pascal name}}Props> = ({ {{#if children}}children, {{/if}}...props }) => {",
            "  return <Container {...props}>{{#if children}}{children}{{/if}}</Container>;",
            "};",
            "",
            "export default {{pascal name}};",
            ""
          ]
        },
        {
          "name": "{{pascal name}}.stories.tsx",
          "open": true,
          "content": [
            "import { Meta, StoryObj } from '@storybook/react';",
            "",
            "import {{pascal name}} from './{{pascal name}}';",
            "",
            "const meta = {",
            "  title: '{{pascal name}}',",
            "  component: {{pascal name}},{{#if children}}",
            "  args: {",
            "    children: 'Children',",
            "  },{{/if}}",
            "} satisfies Meta<typeof {{pascal name}}>;",
            "",
            "export default meta;",
            "",
            "type Story = StoryObj<typeof meta>;",
            "",
            "export const Default = {} satisfies Story;",
            ""
          ]
        },
        {
          "name": "{{pascal name}}.test.tsx",
          "open": true,
          "content": [
            "import React from 'react';",
            "import userEvent from '@testing-library/user-event';",
            "",
            "import { render, screen } from 'tests';",
            "",
            "import {{pascal name}} from './{{pascal name}}';",
            "",
            "test('renders', async () => {",
            "  render(<{{pascal name}}{{#if children}}>Children</{{pascal name}}>{{else}} />{{/if}});",
            "});",
            ""
          ]
        }
      ]
    },
    "react-view": {
      "extends": ["react-common"],
      "displayName": "React view",
      "defaultPath": "src/views",
      "folder": "{{pascal name}}",
      "questions": {
        "name": "View name?"
      },
      "files": [
        {
          "name": "types.ts",
          "open": true,
          "content": ["export interface {{pascal name}}Props {}", ""]
        },
        {
          "name": "{{pascal name}}.tsx",
          "open": true,
          "content": [
            "import React from 'react';",
            "",
            "import { {{pascal name}}Props } from './types';",
            "",
            "import { Container } from './{{pascal name}}.styles';",
            "",
            "const {{pascal name}}: React.FC<{{pascal name}}Props> = () => {",
            "  return <Container></Container>;",
            "};",
            "",
            "export default {{pascal name}};",
            ""
          ]
        },
        {
          "name": "{{pascal name}}.stories.tsx",
          "open": true,
          "content": [
            "import { Meta, StoryObj } from '@storybook/react';",
            "",
            "import {{pascal name}} from './{{pascal name}}';",
            "",
            "const meta = {",
            "  title: '{{pascal name}}',",
            "  component: {{pascal name}},",
            "} satisfies Meta<typeof {{pascal name}}>;",
            "",
            "export default meta;",
            "",
            "type Story = StoryObj<typeof meta>;",
            "",
            "export const Default = {} satisfies Story;",
            ""
          ]
        },
        {
          "name": "{{pascal name}}.test.tsx",
          "open": true,
          "content": [
            "import React from 'react';",
            "import userEvent from '@testing-library/user-event';",
            "",
            "import { render, screen } from 'tests';",
            "",
            "import {{pascal name}} from './{{pascal name}}';",
            "",
            "test('renders', async () => {",
            "  render(<{{pascal name}} />);",
            "});",
            ""
          ]
        }
      ]
    },
    "next-page": {
      "displayName": "NextJS page",
      "defaultPath": "src/app",
      "folder": "{{name}}",
      "questions": {
        "name": "Page name?"
      },
      "files": [
        {
          "name": "page.tsx",
          "open": true,
          "content": [
            "import React from 'react';",
            "",
            "import { Container } from './page.styles';",
            "",
            "const {{pascal name}}Page: React.FC = () => {",
            "  return <Container></Container>;",
            "};",
            "",
            "export default {{pascal name}}Page;",
            ""
          ]
        },
        {
          "name": "page.styles.ts",
          "open": true,
          "content": [
            "import { tw } from 'theme';",
            "",
            "export const Container = tw.div``;",
            ""
          ]
        },
        {
          "name": "page.stories.tsx",
          "open": true,
          "content": [
            "import { Meta, StoryObj } from '@storybook/react';",
            "",
            "import {{pascal name}}Page from './page';",
            "",
            "const meta = {",
            "  title: '{{pascal name}}Page',",
            "  component: {{pascal name}}Page,",
            "} satisfies Meta<typeof {{pascal name}}Page>;",
            "",
            "export default meta;",
            "",
            "type Story = StoryObj<typeof meta>;",
            "",
            "export const Default = {} satisfies Story;",
            ""
          ]
        }
      ]
    },
    "redux-slice": {
      "displayName": "Redux slice",
      "defaultPath": "src/slices",
      "questions": {
        "name": "Slice name?"
      },
      "files": [
        {
          "name": "{{camel name}}.ts",
          "open": true,
          "content": [
            "import { createSlice, PayloadAction } from '@reduxjs/toolkit';",
            "",
            "interface {{pascal name}}State {}",
            "",
            "const initialState: {{pascal name}}State = {};",
            "",
            "export const {{camel name}}Slice = createSlice({",
            "  name: '{{camel name}}',",
            "  initialState,",
            "  reducers: {},",
            "  selectors: {},",
            "});",
            "",
            "export const {} = {{camel name}}Slice.actions;",
            "export const {} = {{camel name}}Slice.selectors;",
            "",
            "export default {{camel name}}Slice.reducer;",
            ""
          ]
        }
      ]
    }
  }
}
